from langchain.agents import initialize_agent, AgentType, tool
# from langchain_core.tools import tool
from langchain_together import Together
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from dotenv import load_dotenv
import os

load_dotenv()  # Load TOGETHER_API_KEY

# Initialize LLM
llm = Together(
    model="lgai/exaone-3-5-32b-instruct",
    temperature=1,
    max_tokens=200
)

# ---- TOOL 1: Extract Info ----
@tool
def extract_information(contract_text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ª–∏–∑–∏–Ω–≥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ª–∏–∑–∏–Ω–≥–∞."""
    prompt = PromptTemplate(
        input_variables=["contract_text"],
        template=(
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ª–∏–∑–∏–Ω–≥–∞. "
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –ª–∏–∑–∏–Ω–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –≤—ã–≤–æ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç –ª–∏–∑–∏–Ω–≥–∞.\n"
            # "–í—ã–≤–æ–¥–∏ –°–¢–†–û–ì–û –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:\n"
            # "–ü—Ä–µ–¥–º–µ—Ç –ª–∏–∑–∏–Ω–≥–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\n"
            "–ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô –ò–ù–§–û–†–ú–¶–ò–Æ, –≤—Å–µ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ.\n"
            "–ù–ï –í–´–í–û–î–ò –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ.\n"
            "–ù–ï –≤—ã–≤–æ–¥–∏ '–ü—Ä–µ–¥–º–µ—Ç –ª–∏–∑–∏–Ω–≥–∞'\n"
            "–¢–µ–∫—Å—Ç: {contract_text}\n"
            "–û—Ç–≤–µ—Ç:"
        )
    )

    chain = LLMChain(llm=llm, prompt=prompt)
    response = chain.invoke({"contract_text": contract_text})
    return response["text"].strip()


# ---- TOOL 2: Classify Product ----
@tool
def classify_contract(product_name: str) -> str:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –ª–∏–∑–∏–Ω–≥–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞/–Ω–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞."""
    prompt = PromptTemplate(
        input_variables=["product_name"],
        template=(
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ.\n"
            "–ò—Å—Ö–æ–¥—è –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ –ª–∏–∑–∏–Ω–≥–∞:\n"
            "{product_name}\n"
            "–í—ã—è—Å–Ω–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ {product_name} —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π.\n"
            "–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –î–ê –∏–ª–∏ –ù–ï–¢.\n"
            "–û–¥–Ω–æ —Å–ª–æ–≤–æ, –ù–ò–ß–ï–ì–û –ë–û–õ–¨–®–ï!\n"
            "–î–ê –∏–ª–∏ –ù–ï–¢."
        )
    )
    chain = LLMChain(llm=llm, prompt=prompt)
    response = chain.invoke({"product_name": product_name})
    return response["text"].strip()


# ---- Build Agent ----
tools = [extract_information, classify_contract]

agent = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True
)

# ---- Example Usage ----
if __name__ == "__main__":
    input_text = (
        "–ü—Ä–µ–¥–º–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞—Ä–µ–Ω–¥—ã: XTC651155S1529342, 0106008 –ê–≤—Ç–æ–º–æ–±–∏–ª–∏, –ö–ê–ú–ê–ó T2530\n–°—Ä–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞—Ä–µ–Ω–¥—ã: 04.04.2025 - 04.03.2028\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <res>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</res>"
    )

    product_name = extract_information(input_text)

    result = agent.run(
        input_text
    )

    print("\nüìã FINAL RESULT:")
    print(f"–õ–∏–∑–∏–Ω–≥ –Ω–∞ {product_name}. –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏–∑–∏–Ω–≥: {result}")
