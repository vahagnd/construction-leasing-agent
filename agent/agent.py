from langchain.agents import initialize_agent, AgentType, tool, AgentExecutor
from langchain_together import Together
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from dotenv import load_dotenv
import os
import json

load_dotenv()  # Load TOGETHER_API_KEY

llama = "meta-llama/Llama-3.3-70B-Instruct-Turbo-Free"
exaone = "lgai/exaone-3-5-32b-instruct"
exaone_deep = "lgai/exaone-deep-32b"

# Initialize LLM
llm = Together(
    model=exaone,
    temperature=0.0,
    max_tokens=200
)

# ---- TOOL 1: Extract Info ----
@tool
def extract_information(contract_text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ª–∏–∑–∏–Ω–≥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞
    –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞–∫–ª—é—á–∏–≤—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –¥–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ª–∏–∑–∏–Ω–≥–∞.
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —ç—Ç–æ –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É '–ö–æ–º–ø–∞–Ω–∏—è company_name –∑–∞–∫–ª—é—á–∏–ª–∞ —Å–¥–µ–ª–∫—É –ª–∏–∑–∏–Ω–≥–∞ –Ω–∞ product_name contract_date(–¥–∞—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)'."""
    prompt = PromptTemplate(
        input_variables=["contract_text"],
        template=(
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ª–∏–∑–∏–Ω–≥–∞. "
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –ª–∏–∑–∏–Ω–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –≤—ã–≤–µ–¥–∏ "
            "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞–∫–ª—é—á–∏–≤—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –¥–∞—Ç—É –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –ø—Ä–µ–¥–º–µ—Ç –ª–∏–∑–∏–Ω–≥–∞.\n"
            "–í—ã–≤–æ–¥–∏ –°–¢–†–û–ì–û –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:\n"
            "–ö–æ–º–∞–Ω–∏—è <–∫–æ–º–∞–Ω–∏—è> –∑–∞–∫–ª—é—á–∏–ª–∞ —Å–¥–µ–ª–∫—É –ª–∏–∑–∏–Ω–≥–∞ –Ω–∞ <–ø—Ä–µ–¥–º–µ—Ç –ª–∏–∑–∏–Ω–≥–∞> <–¥–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º>.\n"
            "–í—ã–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n"
            "–ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô –ò–ù–§–û–†–ú–¶–ò–Æ, –≤—Å–µ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ.\n"
            "–ù–µ –≤—ã–≤–æ–¥–∏ *\n"
            "–ù–ï –í–´–í–û–î–ò –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ.\n"
            "–ù–µ –≤—ã–≤–æ–¥–∏ *\n"
            # "–ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:\n"
            # '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: –û–û–û "–°–¢–†–û–ô–ú–ê–ì–ò–°–¢–†–ê–õ–¨"\n'
            # "–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: 2025-04-14\n"
            # "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ª–∏–∑–Ω–≥–∞: 0106008 –ê–≤—Ç–æ–º–æ–±–∏–ª–∏, SITRAK C7H MAX (LZZ7CMWDXRC643572)\n"
            "–¢–µ–∫—Å—Ç: {contract_text}\n"
            "–û—Ç–≤–µ—Ç:"
        )
    )

    chain = LLMChain(llm=llm, prompt=prompt)
    response = chain.invoke({"contract_text": contract_text})
    return response["text"].strip()

# ---- TOOL 2: Classify Product ----
@tool
def classify_contract(contract_structured_text: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –ª–∏–∑–∏–Ω–≥–∞.
    –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ª–∏–∑–∏–Ω–≥–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É –∏–ª–∏ –Ω–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM.
    –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç ‚Äî —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '400'.
    """
    prompt = PromptTemplate(
        input_variables=["product_description"],
        template=(
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ.\n"
            "–ü–æ –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞ –ª–∏–∑–∏–Ω–≥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π.\n"
            "–ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞, –≤—ã–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å.\n"
            "–ï—Å–ª–∏ —ç—Ç–æ –ù–ï —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞, –≤—ã–≤–æ–¥–∏ '400'.\n"
            "–ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã '*', –Ω–µ –≤—ã–≤–æ–¥–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ: {product_description}\n"
            "–û—Ç–≤–µ—Ç:"
        )
    )

    chain = LLMChain(llm=llm, prompt=prompt)
    response = chain.invoke({"product_description": contract_structured_text})
    return response["text"].strip()

# ---- TOOL 3: Extract contract signing date from structure text about contract
@tool
def extract_contract_date(contract_structured_text: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ª–∏–∑–∏–Ω–≥–æ–≤–æ–π —Å–¥–µ–ª–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥. –ù–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.
    """
    prompt = PromptTemplate(
        input_variables=["contract_structured_text"],
        template=(
            "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫, –ø–æ–ª—É—á–∏–≤—à–∏–π —Å—Ç—Ä–æ–∫—É —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –ª–∏–∑–∏–Ω–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.\n"
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–¥–µ–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏.\n"
            "–¢–µ–∫—Å—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {contract_structured_text}\n"
            "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, –±–µ–∑ —Å–ª–æ–≤ '–¥–∞—Ç–∞', –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, –±–µ–∑ —Ç–æ—á–∫–∏, –±–µ–∑ '*'."
        )
    )
    chain = LLMChain(llm=llm, prompt=prompt)
    result = chain.invoke({"contract_structured_text": contract_structured_text})
    return result["text"].strip()

# ---- TOOL 4: Create or modify text document ----
@tool
def save_leasing_info(contract_info: str) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–∑–∏–Ω–≥–æ–≤–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –∏ –¥–∞—Ç–µ –≤ JSON.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É. –í—ã–∑—ã–≤–∞–µ—Ç LLM-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã.
    """
    # Call the tool directly (simulate how agent would call it)
    date = extract_contract_date.run(contract_info)

    file_path = "data/contracts.json"

    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = []

    data.append({"text": contract_info, "date": date})

    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    return f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –î–∞—Ç–∞: {date}"


# ---- Build Agent ----
tools = [extract_information, classify_contract, extract_contract_date, save_leasing_info]

agent = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=False
)

# Parsing error handling
agent_executor = AgentExecutor.from_agent_and_tools(
    agent=agent.agent,
    tools=tools,
    verbose=False,
    handle_parsing_errors=True # Important
)


# ---- Example Usage ----
if __name__ == "__main__":
    input_text = (
        '–ö–æ–º–ø–∞–Ω–∏—è: –û–û–û "–°–¢–†–û–ô–ú–ê–ì–ò–°–¢–†–ê–õ–¨"\n'
        "–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: 14.04.2025\n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:\n"
        "–ü—Ä–µ–¥–º–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞—Ä–µ–Ω–¥—ã: LZZ7CMWDXRC643572, 0106008 —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã, SITRAK C7H MAX\n"
        "–°—Ä–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞—Ä–µ–Ω–¥—ã: 15.04.2025 - 15.03.2028\n"
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <res>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</res>"
    )

    input_text_construction = (
        '–ö–æ–º–ø–∞–Ω–∏—è: –û–û–û "–°–¢–†–û–ô–ì–†–ê–ù–ò–¢"\n'
        "–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: 22.05.2025\n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:\n"
        "–ü—Ä–µ–¥–º–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞—Ä–µ–Ω–¥—ã: –≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä-–ø–æ–≥—Ä—É–∑—á–∏–∫ JCB 3CX\n"
        "–°—Ä–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞—Ä–µ–Ω–¥—ã: 22.05.2025 - 22.05.2028\n"
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <res>–ü–æ–¥–ø–∏—Å–∞–Ω</res>"
    )

    query = (
        f"–í–æ—Ç –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ª–∏–∑–∏–Ω–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:\n{input_text_construction}\n\n"
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞:\n"
        "1. –ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–µ–¥–º–µ—Ç –ª–∏–∑–∏–Ω–≥–∞ –∏ –¥–∞—Ç—É –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. "
        "–û—Ñ–æ—Ä–º–∏ —ç—Ç–æ –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n"
        "2. –û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ª–∏–∑–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π. "
        "–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ ‚Äî –≤–µ—Ä–Ω–∏ '400' –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å.\n"
        "3. –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –≤ JSON-—Ñ–∞–π–ª. "
        "–ó–∞–ø–∏—Å–∞—Ç—å –Ω—É–∂–Ω–æ: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–∞—Ç—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–±–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –ù–µ –¥–µ–ª–∞–π —à–∞–≥–∏ —Å–∞–º, –≤—ã–∑—ã–≤–∞–π –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n"
        "–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –ª–∏–∑–∏–Ω–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞."
    )

    result = agent_executor.run(
        query
    )

    print("\nüìã FINAL RESULT:")
    print(result)